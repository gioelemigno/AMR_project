function [ data, g, data0 ] = three_wheels(accuracy)

%---------------------------------------------------------------------------
% Make sure we can see the kernel m-files.
run('../addPathToKernel');

%---------------------------------------------------------------------------
% Integration parameters.
tMax = 4;%2.8;                  % End time.
plotSteps = 9;               % How many intermediate plots to produce?
t0 = 0;                      % Start time.
singleStep = 0;              % Plot at each timestep (overrides tPlot).

% Period at which intermediate plots should be produced.
tPlot = (tMax - t0) / (plotSteps - 1);

% How close (relative) do we need to get to tMax to be considered finished?
small = 100 * eps;

% What kind of dissipation?
dissType = 'global';

%---------------------------------------------------------------------------
targetRadius = 5;
velocityA = 5;
velocityB = 5;
%inputA = 1;
%inputB = 1;

range_input_d = [-0.05, 0.05];
range_input_u = [-1, 1];

%---------------------------------------------------------------------------
% What level set should we view?
level = 0;

% Visualize the 3D reachable set.
displayType = 'surface';

% Pause after each plot?
pauseAfterPlot = 0;

% Delete previous plot before showing next?
deleteLastPlot = 0;%1;

% Visualize the angular dimension a little bigger.
aspectRatio = [ 1 1 0.4 ];

% Plot in separate subplots (set deleteLastPlot = 0 in this case)?
useSubplots = 0;

%---------------------------------------------------------------------------
% Approximately how many grid cells?
%   (Slightly different grid cell counts will be chosen for each dimension.)
Nx = 51;

% Create the grid.
g.dim = 3;
g.min = [  -10; -10;     0 ];
g.max = [ +20; +10; +2*pi ];
g.bdry = { @addGhostExtrapolate; @addGhostExtrapolate; @addGhostPeriodic };
% Roughly equal dx in x and y (so different N).
g.N = [ Nx; ceil(Nx * (g.max(2) - g.min(2)) / (g.max(1) - g.min(1))); Nx-1 ];
% Need to trim max bound in \psi (since the BC are periodic in this dimension).
g.max(3) = g.max(3) * (1 - 1 / g.N(3));
g = processGrid(g);

%---------------------------------------------------------------------------
% Create initial conditions (cylinder centered on origin).
data = shapeCylinder(g, 3, [ 0; 0; 0 ], targetRadius);
data0 = data;

%---------------------------------------------------------------------------
% Set up spatial approximation scheme.
schemeFunc = @termLaxFriedrichs;
schemeData.hamFunc = @three_wheels_HamFunc;
schemeData.partialFunc = @three_wheels_PartialFunc; 
schemeData.grid = g;

% The Hamiltonian and partial functions need problem parameters.
schemeData.velocityA = velocityA;
schemeData.velocityB = velocityB;
%schemeData.inputA = inputA;
%schemeData.inputB = inputB;

schemeData.range_input_d = range_input_d;
schemeData.range_input_u = range_input_u;


global opt_input_d;
%opt_input_d = 0;

global opt_input_u;
%opt_input_u = 0;


%---------------------------------------------------------------------------
% Choose degree of dissipation.

switch(dissType)
 case 'global'
  schemeData.dissFunc = @artificialDissipationGLF;
 case 'local'
  schemeData.dissFunc = @artificialDissipationLLF;
 case 'locallocal'
  schemeData.dissFunc = @artificialDissipationLLLF;
 otherwise
  error('Unknown dissipation function %s', dissFunc);
end

%---------------------------------------------------------------------------
if(nargin < 1)
  accuracy = 'medium';
end

% Set up time approximation scheme.
integratorOptions = odeCFLset('factorCFL', 0.75, 'stats', 'on');

% Choose approximations at appropriate level of accuracy.
switch(accuracy)
 case 'low'
  schemeData.derivFunc = @upwindFirstFirst;
  integratorFunc = @odeCFL1;
 case 'medium'
  schemeData.derivFunc = @upwindFirstENO2;
  integratorFunc = @odeCFL2;
 case 'high'
  schemeData.derivFunc = @upwindFirstENO3;
  integratorFunc = @odeCFL3;
 case 'veryHigh'
  schemeData.derivFunc = @upwindFirstWENO5;
  integratorFunc = @odeCFL3;
 otherwise
  error('Unknown accuracy level %s', accuracy);
end

if(singleStep)
  integratorOptions = odeCFLset(integratorOptions, 'singleStep', 'on');
end

%---------------------------------------------------------------------------
% Restrict the Hamiltonian so that reachable set only grows.
%   The Lax-Friedrichs approximation scheme MUST already be completely set up.
innerFunc = schemeFunc;
innerData = schemeData;
clear schemeFunc schemeData;

% Wrap the true Hamiltonian inside the term approximation restriction routine.
schemeFunc = @termRestrictUpdate;
schemeData.innerFunc = innerFunc;
schemeData.innerData = innerData;
schemeData.positive = 0;

%---------------------------------------------------------------------------
% Initialize Display
f = figure;

% Set up subplot parameters if necessary.
if(useSubplots)
  rows = ceil(sqrt(plotSteps));
  cols = ceil(plotSteps / rows);
  plotNum = 1;
  subplot(rows, cols, plotNum);
end

h = visualizeLevelSet(g, data, displayType, level, [ 't = ' num2str(t0) ]);

camlight right;  camlight left;
hold on;
axis(g.axis);
daspect(aspectRatio);
drawnow;


%---------------------------------------------------------------------------
% Loop until tMax (subject to a little roundoff).
tNow = t0;
startTime = cputime;
while(tMax - tNow > small * tMax)

  % Reshape data array into column vector for ode solver call.
  y0 = data(:);

  % How far to step?
  tSpan = [ tNow, min(tMax, tNow + tPlot) ];
  
  % Take a timestep.
  [ t y ] = feval(integratorFunc, schemeFunc, tSpan, y0,...
                  integratorOptions, schemeData);
  tNow = t(end);

  % Get back the correctly shaped data array
  data = reshape(y, g.shape);

  if(pauseAfterPlot)
    % Wait for last plot to be digested.
    pause;
  end

  % Get correct figure, and remember its current view.
  figure(f);
  [ view_az, view_el ] = view;

  % Delete last visualization if necessary.
  if(deleteLastPlot)
    delete(h);
  end

  % Move to next subplot if necessary.
  if(useSubplots)
    plotNum = plotNum + 1;
    subplot(rows, cols, plotNum);
  end

  % Create new visualization.
  h = visualizeLevelSet(g, data, displayType, level, [ 't = ' num2str(tNow) ]);

  % Restore view.
  view(view_az, view_el);
  
end

endTime = cputime;
fprintf('Total execution time %g seconds\n', endTime - startTime);




%---------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%---------------------------------------------------------------------------
function hamValue = three_wheels_HamFunc(t, data, deriv, schemeData)


checkStructureFields(schemeData, 'grid', 'velocityA', 'velocityB', ...
                                  'range_input_d', 'range_input_u');

grid = schemeData.grid;

global opt_input_d;
global opt_input_u;


% implements equation (3.3) from my thesis term by term
%   with allowances for \script A and \script B \neq [ -1, +1 ]
%   where deriv{i} is p_i
%         x_r is grid.xs{1}, y_r is grid.xs{2}, \psi_r is grid.xs{3}
%         v_a is velocityA, v_b is velocityB, 
%         \script A is inputA and \script B is inputB

d_min = schemeData.range_input_d(1);
d_max = schemeData.range_input_d(2);

u_min = schemeData.range_input_u(1);
u_max = schemeData.range_input_u(2);

p1 = deriv{1};
p2 = deriv{2};
p3 = deriv{3};

L = 1;
DELTA = deg2rad(30);

x_r = grid.xs{1};
y_r = grid.xs{2};
theta = grid.xs{3};


gamma_u_1 = (2/3)*cos(theta+DELTA) .* p1 ...
              + (2/3)*sin(theta+DELTA) .* p2 ...
              + (1/(3*L)) .* p3;

gamma_u_2 = (-2/3)*cos(theta-DELTA) .* p1 ...
            + (-2/3)*sin(theta-DELTA) .* p2 ...
            + (1/(3*L)) .* p3;

gamma_u_3 = (2/3)*sin(theta) .* p1 ...
        + (-2/3)*cos(theta) .* p2 ...
        + (1/(3*L)) .* p3;


gamma_d_1 = (-sin(theta)) .* p1;
gamma_d_2 = cos(theta) .* p2;


opt_input_u_1 = (gamma_u_1 >= 0)*u_min + (gamma_u_1 < 0)*u_max;
opt_input_u_2 = (gamma_u_2 >= 0)*u_min + (gamma_u_2 < 0)*u_max;
opt_input_u_3 = (gamma_u_3 >= 0)*u_min + (gamma_u_3 < 0)*u_max;

opt_input_u = {opt_input_u_1; opt_input_u_2; opt_input_u_3};


opt_input_d_1 = (gamma_d_1 >= 0)*d_max + (gamma_d_1 < 0)*d_min;
opt_input_d_2 = (gamma_d_2 >= 0)*d_max + (gamma_d_2 < 0)*d_min;
opt_input_d_3 = 0;

opt_input_d = {opt_input_d_1; opt_input_d_2; opt_input_d_3};




v_a = schemeData.velocityA;
v_b = schemeData.velocityB;

ham_u1 = (2/3) .* cos(theta+DELTA) .* p1 + (2/3) .* sin(theta + DELTA) .* p2 + (1/(3*L)) .* p3;
ham_u2 = (-2/3) .* cos(theta-DELTA) .* p1 + (-2/3) .* sin(theta-DELTA) .* p2 + (1/(3*L)) .* p3;
ham_u3 = (2/3) .* sin(theta) .* p1 + (-2/3) .* cos(theta) .* p2 + (1/(3*L)) .* p3;

ham_d1 = -sin(theta) .* p1;
ham_d2 = cos(theta) .* p2;
ham_d3 = 0;

hamValue = ham_u1 .* opt_input_u_1 ...
          + ham_u2 .* opt_input_u_2 ...
          + ham_u3 .* opt_input_u_3 ...
          + ham_d1 .* opt_input_d_1 ...
          + ham_d2 .* opt_input_d_2 ...
          + ham_d3 .* opt_input_d_3;

hamValue = (-1)*hamValue;



%---------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%---------------------------------------------------------------------------
function alpha = three_wheels_PartialFunc(t, data, derivMin, derivMax, schemeData, dim)



checkStructureFields(schemeData, 'grid', 'velocityA', 'velocityB');

grid = schemeData.grid;

global opt_input_d;
global opt_input_u;

%disp('opt_input_d:');
%disp(opt_input_d);


L = 1;
DELTA = deg2rad(30);

x_r = grid.xs{1};
y_r = grid.xs{2};
theta = grid.xs{3};

v_a = schemeData.velocityA;
v_b = schemeData.velocityB;


opt_input_u_1 = opt_input_u{1}; 
opt_input_u_2 = opt_input_u{2}; 
opt_input_u_3 = opt_input_u{3};

 
opt_input_d_1 = opt_input_d{1};
opt_input_d_2 = opt_input_d{2};
opt_input_d_3 = opt_input_d{3};

switch dim
  case 1
    alpha = (2/3) .* cos(theta+DELTA) .* opt_input_u_1 ...
          + (-2/3) .* cos(theta-DELTA) .* opt_input_u_2 ...
          + (2/3) .* sin(theta) .* opt_input_u_3 ...
          + (-sin(theta)) .* opt_input_d_1;
    
    alpha = abs(alpha); 


  case 2
    alpha = (2/3) .* sin(theta+DELTA) .* opt_input_u_1 ...
          + (-2/3) .* sin(theta-DELTA) .* opt_input_u_2 ...
          + (-2/3) .* cos(theta) .* opt_input_u_3 ...
          + cos(theta) .* opt_input_d_2;
    
    alpha = abs(alpha);


  case 3
    alpha = (opt_input_u_1 + opt_input_u_2 + opt_input_u_3) .* (1/(3*L))
    alpha = abs(alpha);

  otherwise
    error([ 'Partials for the game of two identical vehicles' ...
            ' only exist in dimensions 1-3' ]);
end



